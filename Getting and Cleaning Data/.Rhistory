url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
library(httr); html2 <- GET(url)
content2 <- content(html2, as="text")
parsedHtml <- htmlParse(content2, asText=TRUE)
library(XML)
parsedHtml <- htmlParse(content2, asText=TRUE)
content2
html2
parsedHtml
xpathSApply(html2, "//title", xmlValue)
xpathSApply(parsedHtml, "//title", xmlValue)
?oauth_app
githubapp <- oauth_app("github",
key = "74754d170debfbf3fd16",
secret = "32f3b4bb9b9b76644969e666086c810f660419df")
?oauth2.0_token
?oauth_endpoints
github_token <- oauth2.0_token(oauth_endpoints("github"), githubapp)
https://github.com/login/oauth/authorize?client_id=74754d170debfbf3fd16&scope=&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code
github_token <- oauth2.0_token(oauth_endpoints("github"), githubapp)
setwd("./Getting and Cleaning Data/")
# First, read in features.txt and activity_labels.txt as character vectors.
# Then, clean up the names.
features <- scan("./UCI HAR Dataset/features.txt", what=character(), sep="\n")
activitylabels <- scan("./UCI HAR Dataset/activity_labels.txt",
what=character(), sep="\n")
# Remove number prefix from each label
activitylabels <- sapply(activitylabels, function(x) {strsplit(x, " ")[[1]][[2]]})
features <- sapply(features, function(x) {strsplit(x, " ")[[1]][[2]]})
# Next, we read in the information for the test data. subject_test.txt
# and y_test.txt are read as numeric vectors, X_test.txt is read in
# as a data frame.
subjecttest <- scan("./UCI HAR Dataset/test/subject_test.txt")
ytest <- scan("./UCI HAR Dataset/test/y_test.txt")
xtest <- read.table("./UCI HAR Dataset/test/X_test.txt")
# The training data is read in, in identical fashion.
subjecttrain <- scan("./UCI HAR Dataset/train/subject_train.txt")
ytrain <- scan("./UCI HAR Dataset/train/y_train.txt")
xtrain <- read.table("./UCI HAR Dataset/train/X_train.txt")
# The activities are more clearly labeled -- the numbers in ytest
# and ytrain are converted to the corresponding activity labels,
ytest <- activitylabels[ytest]
ytrain <- activitylabels[ytrain]
# The test and the train data frames are assembled -- column one is the subject,
# column two is the activity, and the remaining columns are the data from xtest
# and xtrain. Each column is labeled -- Subject, Activity, and the labels from
# features.
test.frame <- cbind(subjecttest, ytest, xtest)
names(test.frame) <- c("Subject", "Activity", features)
train.frame <- cbind(subjecttrain, ytrain, xtrain)
names(train.frame) <- c("Subject", "Activity", features)
# The entire frame is assembled. train.frame is bound to test.frame as rows.
full.data <- rbind(test.frame, train.frame)
# Measurements on mean and standard deviation are extracted.
# Locate the columns representing mean/standard deviation
inds <- grep("mean\\(\\)|std", names(full.data))
# Extract into new data frame
data.means <- cbind(full.data[, 1:2], full.data[, inds])
# Clean and clarify variable names.
# If label begins with 't' it is expanded to 'time,' per explanation in
# features_info.txt.
# Likewise, 'f' is expanded to 'frequency.'
names(data.means) <- gsub("^t", "time", names(data.means))
names(data.means) <- gsub("^f", "frequency", names(data.means))
# Remove special characters; dash is replaced with period to serve
# as separator.
names(data.means) <- gsub("\\(|\\)", "", names(data.means))
names(data.means) <- gsub("\\-", "\\.", names(data.means))
# Sort data.means by subject, ascending.
data.means <- data.means[order(data.means$Subject),]
# Prepare data for processing into final output.
# First, split by subject.
databysubject <- split(data.means, data.means$Subject)
# Split each element databysubject by activity
databyactivity <- lapply(databysubject, function(x) {split(x, x$Activity)})
# For each subject-activity pair, calculate the mean of all measurements.
# The resulting vectors will comprise the output data frame, outp.
# outp will be the data frame to which we fill in the necessary means;
# to allocate the necessary data in an efficient manner, we will make a
# copy of the first 180 rows of data.means (30 subjects * 6 activities gives
# 180 observations).
outp <- data.means[1:180, ]
# We calculate each observation and fill in the respective row
k <- 1
for(i in seq_along(databyactivity)) {
for(j in seq_along(databyactivity[[i]])) {
# databyactivity[[i]][[j]] is a data frame containing the data for
# subject i, activity j
# For clarity, databyactivity[[i]][[j]] is placed into a container variable
container <- databyactivity[[i]][[j]]
# Columns 3 to 68 are measurements; 1 and 2 are "Subject" and "Activity"
means <- colMeans(container[, 3:68])
# Fill in row k with the necessary information
outp[k, 1] <- container[1, 1]
outp[k, 2] <- container[1, 2]
outp[k, 3:68] <- means
k <- k + 1
}
}
# Write to output file
write.table(outp, "output.txt", sep = "\t")
View(outp)
class(outp$Subject)
class(outp$Activity)
class(outp$timeBodyAcc.std.X)
names(outp[, 3:68]) <- sapply(names(outp[, 3:68]), function(x) {
paste(x, ".mean")})
names(outp)
names(outp) <- c("Subject", "Activity",
sapply(names(outp[, 3:68]), function(x) {paste(x, ".mean")}))
names(outp)
names(outp) <- c("Subject", "Activity",
sapply(names(outp[, 3:68]),
function(x) {paste(x, ".mean", sep="")}))
names(outp)
rm(list=ls())
# First, read in features.txt and activity_labels.txt as character vectors.
# Then, clean up the names.
features <- scan("./UCI HAR Dataset/features.txt", what=character(), sep="\n")
activitylabels <- scan("./UCI HAR Dataset/activity_labels.txt",
what=character(), sep="\n")
# Remove number prefix from each label
activitylabels <- sapply(activitylabels, function(x) {strsplit(x, " ")[[1]][[2]]})
features <- sapply(features, function(x) {strsplit(x, " ")[[1]][[2]]})
# Next, we read in the information for the test data. subject_test.txt
# and y_test.txt are read as numeric vectors, X_test.txt is read in
# as a data frame.
subjecttest <- scan("./UCI HAR Dataset/test/subject_test.txt")
ytest <- scan("./UCI HAR Dataset/test/y_test.txt")
xtest <- read.table("./UCI HAR Dataset/test/X_test.txt")
# The training data is read in, in identical fashion.
subjecttrain <- scan("./UCI HAR Dataset/train/subject_train.txt")
ytrain <- scan("./UCI HAR Dataset/train/y_train.txt")
xtrain <- read.table("./UCI HAR Dataset/train/X_train.txt")
# The activities are more clearly labeled -- the numbers in ytest
# and ytrain are converted to the corresponding activity labels,
ytest <- activitylabels[ytest]
ytrain <- activitylabels[ytrain]
# The test and the train data frames are assembled -- column one is the subject,
# column two is the activity, and the remaining columns are the data from xtest
# and xtrain. Each column is labeled -- Subject, Activity, and the labels from
# features.
test.frame <- cbind(subjecttest, ytest, xtest)
names(test.frame) <- c("Subject", "Activity", features)
train.frame <- cbind(subjecttrain, ytrain, xtrain)
names(train.frame) <- c("Subject", "Activity", features)
# The entire frame is assembled. train.frame is bound to test.frame as rows.
full.data <- rbind(test.frame, train.frame)
# Measurements on mean and standard deviation are extracted.
# Locate the columns representing mean/standard deviation
inds <- grep("mean\\(\\)|std", names(full.data))
# Extract into new data frame
data.means <- cbind(full.data[, 1:2], full.data[, inds])
# Clean and clarify variable names.
# If label begins with 't' it is expanded to 'time,' per explanation in
# features_info.txt.
# Likewise, 'f' is expanded to 'frequency.'
names(data.means) <- gsub("^t", "time", names(data.means))
names(data.means) <- gsub("^f", "frequency", names(data.means))
# Remove special characters; dash is replaced with period to serve
# as separator.
names(data.means) <- gsub("\\(|\\)", "", names(data.means))
names(data.means) <- gsub("\\-", "\\.", names(data.means))
# Sort data.means by subject, ascending.
data.means <- data.means[order(data.means$Subject),]
# Prepare data for processing into final output.
# First, split by subject.
databysubject <- split(data.means, data.means$Subject)
# Split each element databysubject by activity
databyactivity <- lapply(databysubject, function(x) {split(x, x$Activity)})
# For each subject-activity pair, calculate the mean of all measurements.
# The resulting vectors will comprise the output data frame, outp.
# outp will be the data frame to which we fill in the necessary means;
# to allocate the necessary data in an efficient manner, we will make a
# copy of the first 180 rows of data.means (30 subjects * 6 activities gives
# 180 observations).
outp <- data.means[1:180, ]
# Variables for the measurement variables are renamed, since each value in the
# output data will be a mean of the values from the input data.
names(outp) <- c("Subject", "Activity",
sapply(names(outp[, 3:68]),
function(x) {paste(x, ".mean", sep="")}))
# We calculate each observation and fill in the respective row
k <- 1
for(i in seq_along(databyactivity)) {
for(j in seq_along(databyactivity[[i]])) {
# databyactivity[[i]][[j]] is a data frame containing the data for
# subject i, activity j
# For clarity, databyactivity[[i]][[j]] is placed into a container variable
container <- databyactivity[[i]][[j]]
# Columns 3 to 68 are measurements; 1 and 2 are "Subject" and "Activity"
means <- colMeans(container[, 3:68])
# Fill in row k with the necessary information
outp[k, 1] <- container[1, 1]
outp[k, 2] <- container[1, 2]
outp[k, 3:68] <- means
k <- k + 1
}
}
# Write to output file
write.table(outp, "output.txt", sep = "\t")
names(outp)
# First, read in features.txt and activity_labels.txt as character vectors.
# Then, clean up the names.
features <- scan("./UCI HAR Dataset/features.txt", what=character(), sep="\n")
activitylabels <- scan("./UCI HAR Dataset/activity_labels.txt",
what=character(), sep="\n")
# Remove number prefix from each label
activitylabels <- sapply(activitylabels, function(x) {strsplit(x, " ")[[1]][[2]]})
features <- sapply(features, function(x) {strsplit(x, " ")[[1]][[2]]})
# Next, we read in the information for the test data. subject_test.txt
# and y_test.txt are read as numeric vectors, X_test.txt is read in
# as a data frame.
subjecttest <- scan("./UCI HAR Dataset/test/subject_test.txt")
ytest <- scan("./UCI HAR Dataset/test/y_test.txt")
xtest <- read.table("./UCI HAR Dataset/test/X_test.txt")
# The training data is read in, in identical fashion.
subjecttrain <- scan("./UCI HAR Dataset/train/subject_train.txt")
ytrain <- scan("./UCI HAR Dataset/train/y_train.txt")
xtrain <- read.table("./UCI HAR Dataset/train/X_train.txt")
# The activities are more clearly labeled -- the numbers in ytest
# and ytrain are converted to the corresponding activity labels,
ytest <- activitylabels[ytest]
ytrain <- activitylabels[ytrain]
# The test and the train data frames are assembled -- column one is the subject,
# column two is the activity, and the remaining columns are the data from xtest
# and xtrain. Each column is labeled -- Subject, Activity, and the labels from
# features.
test.frame <- cbind(subjecttest, ytest, xtest)
names(test.frame) <- c("Subject", "Activity", features)
train.frame <- cbind(subjecttrain, ytrain, xtrain)
names(train.frame) <- c("Subject", "Activity", features)
# The entire frame is assembled. train.frame is bound to test.frame as rows.
full.data <- rbind(test.frame, train.frame)
# Measurements on mean and standard deviation are extracted.
# Locate the columns representing mean/standard deviation
inds <- grep("mean\\(\\)|std", names(full.data))
# Extract into new data frame
data.means <- cbind(full.data[, 1:2], full.data[, inds])
# Clean and clarify variable names.
# If label begins with 't' it is expanded to 'time,' per explanation in
# features_info.txt.
# Likewise, 'f' is expanded to 'frequency.'
names(data.means) <- gsub("^t", "time", names(data.means))
names(data.means) <- gsub("^f", "frequency", names(data.means))
# Remove special characters; dash is replaced with period to serve
# as separator.
names(data.means) <- gsub("\\(|\\)", "", names(data.means))
names(data.means) <- gsub("\\-", "\\.", names(data.means))
# Sort data.means by subject, ascending.
data.means <- data.means[order(data.means$Subject),]
# Prepare data for processing into final output.
# First, split by subject.
databysubject <- split(data.means, data.means$Subject)
# Split each element databysubject by activity
databyactivity <- lapply(databysubject, function(x) {split(x, x$Activity)})
# For each subject-activity pair, calculate the mean of all measurements.
# The resulting vectors will comprise the output data frame, outp.
# outp will be the data frame to which we fill in the necessary means;
# to allocate the necessary data in an efficient manner, we will make a
# copy of the first 180 rows of data.means (30 subjects * 6 activities gives
# 180 observations).
outp <- data.means[1:180, ]
# Variables for the measurement variables are renamed, since each value in the
# output data will be a mean of the values from the input data.
names(outp) <- c("Subject", "Activity",
sapply(names(outp[, 3:68]),
function(x) {paste(x, ".average", sep="")}))
# We calculate each observation and fill in the respective row
k <- 1
for(i in seq_along(databyactivity)) {
for(j in seq_along(databyactivity[[i]])) {
# databyactivity[[i]][[j]] is a data frame containing the data for
# subject i, activity j
# For clarity, databyactivity[[i]][[j]] is placed into a container variable
container <- databyactivity[[i]][[j]]
# Columns 3 to 68 are measurements; 1 and 2 are "Subject" and "Activity"
means <- colMeans(container[, 3:68])
# Fill in row k with the necessary information
outp[k, 1] <- container[1, 1]
outp[k, 2] <- container[1, 2]
outp[k, 3:68] <- means
k <- k + 1
}
}
# Write to output file
write.table(outp, "output.txt", sep = "\t")
names(outp)
?str
summary(outp)
test <- data.frame(1:3, 1:5)
test <- data.frame(1:5, 2:6)
test
test1 <- test[1:2,]
test1
test1[2, 2] <- 100
test1
test
